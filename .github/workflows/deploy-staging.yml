name: Deploy to Staging env

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on:
      - self-hosted
      - staging
    env:
      ENVIRONMENT: staging
      DOMAIN: ${{ secrets.DOMAIN }}
      USERNAME: ${{ secrets.TRAEFIK_USERNAME }}
      PASSWORD: ${{ secrets.TRAEFIK_PASSWORD }}
      HASHED_PASSWORD: ${{ secrets.HASHED_PASSWORD }}
      EMAIL: ${{ secrets.TRAEFIK_EMAIL }}
      STACK_NAME: ${{ secrets.STACK_NAME_STAGING }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      EMAILS_FROM_EMAIL: ${{ secrets.EMAILS_FROM_EMAIL }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:

    


    
    

    - name: Stop and remove existing containers
      env:
        STACK_NAME: ${{ secrets.STACK_NAME_STAGING }}
      run: |
        docker compose -f docker-compose.yml -f docker-compose.traefik-stage.yml --project-name $env:STACK_NAME down --remove-orphans
        $containersToRemove = docker ps -aq --filter name=$env:STACK_NAME
        if ($containersToRemove) {
          docker rm -f $containersToRemove
        } else {
          Write-Host "No containers to remove."
        }
      continue-on-error: true
    - name: Cleanup Docker environment
      run: |
        docker system prune -f

    - name: Check current user
      run: |
        whoami
        echo "Current user: $env:USERNAME"

    - name: Add directory to Git safe directories
      run: |
        git config --global --add safe.directory C:/actions-runner/_work/accounting/accounting
        git config --global --list

   # - name: Check directory ownership
    #  run: |
     #   icacls C:/actions-runner/_work/accounting/accounting

 #   - name: Change directory ownership
  #    run: |
   #     takeown /F C:/actions-runner/_work/accounting/accounting /R /D Y
    #    icacls C:/actions-runner/_work/accounting/accounting /grant "githubActionsRunner:(OI)(CI)F" /T
     #   icacls C:/actions-runner/_work/accounting/accounting

    #- name: Verify Git configuration
     # run: |
      #  git config --list --show-origin

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    #- name: Check Docker status
    #  run: |
    #    docker info
    #    docker-compose version
    #    docker network ls

    - name: Generate self-signed certificate and Traefik configuration for staging
      run: |
        if (-not (Test-Path traefik-stage-certificates/domain.crt)) {
          mkdir -p traefik-stage-certificates
          $domain = "${{ env.DOMAIN }}"
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout traefik-stage-certificates/domain.key -out traefik-stage-certificates/domain.crt -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=$domain"
          Set-Content -Path traefik-stage-certificates/tls.yml -Value @"
        tls:
          certificates:
            - certFile: /certificates/domain.crt
              keyFile: /certificates/domain.key
        "@
        } else {
          Write-Host "Certificates already exist. Skipping generation."
        }

    - name: Verify certificate generation
      run: |
        if (Test-Path traefik-stage-certificates/domain.crt) {
          Write-Host "Certificate generated successfully"
          Get-Content traefik-stage-certificates/domain.crt | Select-Object -First 5
        } else {
          Write-Error "Certificate generation failed"
          exit 1
        }

    - name: Create traefik-public network
      run: |
        if (-not (docker network ls --format '{{.Name}}' | Select-String -Quiet '^traefik-public$')) {
          docker network create traefik-public
        } else {
          Write-Host "traefik-public network already exists"
        }
    #- name: List directory contents
      #run: |
       # pwd
        #dir

    - name: Set up Traefik environment variables
      run: |
        echo "HASHED_PASSWORD=$env:HASHED_PASSWORD" >> $env:GITHUB_ENV


    

    - name: Build and deploy
      env:
        STACK_NAME: ${{ secrets.STACK_NAME_STAGING }}
        DOMAIN: ${{ secrets.DOMAIN }}
      run: |
        docker compose -f docker-compose.yml --project-name $env:STACK_NAME build --no-cache
        docker compose -f docker-compose.traefik-stage.yml -f docker-compose.yml --project-name $env:STACK_NAME config
        docker compose -f docker-compose.traefik-stage.yml -f docker-compose.yml --project-name $env:STACK_NAME up -d  --force-recreate
      continue-on-error: true


    - name: Check running containers
      run: docker ps

    - name: Check Traefik logs if deployment failed
      if: failure()
      run: |
        docker logs ${{ secrets.STACK_NAME_STAGING }}-traefik